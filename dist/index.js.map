{"version":3,"sources":["../src/node/cli.ts","../src/node/pluginContainer.ts","../src/node/server/index.ts","../src/node/optimizer/index.ts","../src/node/constants.ts","../src/node/optimizer/scanPlugin.ts","../src/node/optimizer/preBundlePlugin.ts","../src/node/utils.ts","../src/node/plugins/esbuild.ts","../src/node/plugins/importAnalysis.ts","../src/node/plugins/resolve.ts","../src/node/plugins/index.ts","../src/node/server/middleware/indexHtml.ts","../src/node/server/middleware/transform.ts"],"sourcesContent":["import cac from 'cac'\nimport { startDevServer } from './server'\n\nconst cli = cac()\n\ncli\n    .command('[root]','Run dev server')\n    .alias(\"serve\")\n    .alias(\"dev\")\n    .action(async ()=>{\n        await startDevServer()\n    })\n\ncli.help()\ncli.parse()","import type {\n  LoadResult,\n  PartialResolvedId,\n  SourceDescription,\n  PluginContext as RollupPluginContext,\n  ResolvedId,\n} from \"rollup\";\n\nimport { ServerContext } from \"./server\";\n\nexport interface PluginContainer {\n  resolveId(id: string, importer?: string): Promise<PartialResolvedId | null>;\n  load(id: string): Promise<LoadResult | null>;\n  transform(code: string, id: string): Promise<SourceDescription | null>;\n}\nexport type ServerHook = (\n  server: ServerContext\n) => (() => void) | void | Promise<(() => void) | void>;\n\n// 只实现以下这几个钩子\nexport interface Plugin {\n  name: string;\n  configureServer?: ServerHook;\n  resolveId?: (\n    id: string,\n    importer?: string\n  ) => Promise<PartialResolvedId | null> | PartialResolvedId | null;\n  load?: (id: string) => Promise<LoadResult | null> | LoadResult | null;\n  transform?: (\n    code: string,\n    id: string\n  ) => Promise<SourceDescription | null> | SourceDescription | null;\n  transformIndexHtml?: (raw: string) => Promise<string> | string;\n}\n\n// 模拟 Rollup 的插件机制\nexport const createPluginContainer = (plugins: Plugin[]): PluginContainer => {\n  // 插件上下文对象\n  // @ts-ignore 这里仅实现上下文对象的 resolve 方法\n  class Context implements RollupPluginContext {\n    async resolve(id: string, importer?: string) {\n      let out = await pluginContainer.resolveId(id, importer);\n      if (typeof out === \"string\") out = { id: out };\n      return out as ResolvedId | null;\n    }\n  }\n  // 插件容器\n  const pluginContainer: PluginContainer = {\n    async resolveId(id: string, importer?: string) {\n      const ctx = new Context() as any;\n      for (const plugin of plugins) {\n        if (plugin.resolveId) {\n          const newId = await plugin.resolveId.call(ctx as any, id, importer);\n          if (newId) {\n            id = typeof newId === \"string\" ? newId : newId.id;\n            return { id };\n          }\n        }\n      }\n      return null;\n    },\n    async load(id) {\n      const ctx = new Context() as any;\n      for (const plugin of plugins) {\n        if (plugin.load) {\n          const result = await plugin.load.call(ctx, id);\n          if (result) {\n            return result;\n          }\n        }\n      }\n      return null;\n    },\n    async transform(code, id) {\n      const ctx = new Context() as any;\n      for (const plugin of plugins) {\n        if (plugin.transform) {\n          const result = await plugin.transform.call(ctx, code, id);\n          if (!result) continue;\n          if (typeof result === \"string\") {\n            code = result;\n          } else if (result.code) {\n            code = result.code;\n          }\n        }\n      }\n      return { code };\n    },\n  };\n\n  return pluginContainer;\n};\n","import { PluginContainer, createPluginContainer } from \"./../pluginContainer\";\nimport connect from \"connect\";\n\nimport { blue, green } from \"picocolors\";\nimport { optimize } from \"../optimizer\";\nimport { resolvePlugins } from \"../plugins\";\nimport { Plugin } from \"../plugin\";\nimport { indexHtmlMiddleware } from \"./middleware/indexHtml\";\nimport { transformMiddleware } from \"./middleware/transform\";\n\nexport interface ServerContext {\n  root: string;\n  pluginContainer: PluginContainer;\n  app: connect.Server;\n  plugins: Plugin[];\n}\n\nexport async function startDevServer() {\n  const app = connect();\n\n  const root = process.cwd();\n  const startTime = Date.now();\n\n  const plugins = resolvePlugins();\n  const pluginContainer = createPluginContainer(plugins);\n\n  const serverContext: ServerContext = {\n    root: process.cwd(),\n    app,\n    pluginContainer,\n    plugins,\n  };\n\n  for (const plugin of plugins) {\n    if (plugin.configureServer) {\n      await plugin.configureServer(serverContext);\n    }\n  }\n\n  //  处理 html文件\n  app.use(indexHtmlMiddleware(serverContext));\n\n  app.use(transformMiddleware(serverContext));\n\n  app.listen(3000, async () => {\n    await optimize(root);\n\n    console.log(\n      green(\"🚀HIDETOXIC-VITE 已启动\"),\n      `总时间${Date.now() - startTime}ms`\n    );\n\n    console.log(`> 本地访问路径: ${blue(\"http://localhost:3000\")}`);\n  });\n}\n","import path from 'path' \nimport { build } from 'esbuild'\nimport { green } from 'picocolors';\nimport { PRE_BUNDLE_DIR } from '../constants'\nimport { scanPlugin } from \"./scanPlugin\"\nimport { preBundlePlugin } from './preBundlePlugin';\n\n \nexport async function optimize (root:string){\n    // 1.确定入口\n    const entry = path.resolve(root,\"src/main.tsx\")\n    // 2.从入口开始扫描\n    const deps = new Set<string>()\n    await build({\n        entryPoints:[entry],\n        bundle:true,\n        write:false,\n        plugins:[scanPlugin(deps)]\n    })\n    console.log(`${green(\"需要预构建的依赖：\")}\\n${[...deps].map(green).map(item => ` ${item}`).join('\\n')}`)\n    // 3. 预构建依赖\n    await build({\n        entryPoints: [...deps],\n        write: true,\n        bundle: true,\n        format: \"esm\",\n        splitting: true,\n        outdir: path.resolve(root, PRE_BUNDLE_DIR),\n        plugins: [preBundlePlugin(deps)],\n    });\n\n}\n\n","import path from \"path\";\nexport const EXTERNAL_TYPES = [\n  \"css\",\n  \"less\",\n  \"sass\",\n  \"scss\",\n  \"styl\",\n  \"stylus\",\n  \"pcss\",\n  \"postcss\",\n  \"vue\",\n  \"svelte\",\n  \"marko\",\n  \"astro\",\n  \"png\",\n  \"jpe?g\",\n  \"gif\",\n  \"svg\",\n  \"ico\",\n  \"webp\",\n  \"avif\",\n];\n\nexport const BARE_IMPORT_RE = /^[\\w@][^:]/;\n\nexport const PRE_BUNDLE_DIR = path.join(\"node_modules\", \".h-vite\");\n\nexport const JS_TYPES_RE = /\\.(?:j|t)sx?$|\\.mjs$/;\nexport const QUERY_RE = /\\?.*$/s;\nexport const HASH_RE = /#.*$/s;\n\nexport const DEFAULT_EXTENSIONS = [\".tsx\", \".ts\", \".jsx\", \"js\"];\n","import { Plugin } from 'esbuild'\nimport { BARE_IMPORT_RE,EXTERNAL_TYPES } from '../constants'\n\nexport function scanPlugin(deps:Set<string>):Plugin { \n    return {\n        name:'esbuild:scan-deps',\n        setup(build){\n            // 忽略的文件类型\n            build.onResolve(\n                {filter:new RegExp(`\\\\.(${EXTERNAL_TYPES.join(\"|\")})$`)},\n                (resolveInfo)=>{\n                    return {\n                        path:resolveInfo.path,\n                        external:true\n                    }\n                }\n            )\n\n            // 忽略的文件类型\n            build.onResolve(\n                {\n                    filter: BARE_IMPORT_RE\n                },\n                (resolveInfo) => {\n                    const { path:id } = resolveInfo\n                    // 推入deps中\n                    deps.add(id)\n                    return {\n                        path:id,\n                        external:true\n                    }\n                }\n            )\n        }\n    }\n}\n\n\n","import { Loader, Plugin } from \"esbuild\";\nimport { BARE_IMPORT_RE } from \"../constants\";\n// 用来分析 es 模块 import/export 语句的库\nimport { init, parse } from \"es-module-lexer\";\nimport path from \"path\";\n// 一个实现了 node 路径解析算法的库\nimport resolve from \"resolve\";\n// 一个更加好用的文件操作库\nimport fs from \"fs-extra\";\n// 用来开发打印 debug 日志的库\nimport createDebug from \"debug\";\nimport { normalizePath } from \"../utils\";\n\nconst debug = createDebug(\"dev\");\n\nexport function preBundlePlugin(deps: Set<string>): Plugin {\n  return {\n    name: \"esbuild:pre-bundle\",\n    setup(build) {\n      build.onResolve(\n        {\n          filter: BARE_IMPORT_RE,\n        },\n        (resolveInfo) => {\n          const { path: id, importer } = resolveInfo;\n          const isEntry = !importer;\n          // 命中需要预编译的依赖\n          if (deps.has(id)) {\n            // 若为入口，则标记 dep 的 namespace\n            return isEntry\n              ? {\n                  path: id,\n                  namespace: \"dep\",\n                }\n              : {\n                  // 因为走到 onResolve 了，所以这里的 path 就是绝对路径了\n                  path: resolve.sync(id, { basedir: process.cwd() }),\n                };\n          }\n        }\n      );\n\n      // 拿到标记后的依赖，构造代理模块，交给 esbuild 打包\n      build.onLoad(\n        {\n          filter: /.*/,\n          namespace: \"dep\",\n        },\n        async (loadInfo) => {\n          await init;\n          const id = loadInfo.path;\n          const root = process.cwd();\n          const entryPath = normalizePath(resolve.sync(id, { basedir: root }));\n          const code = await fs.readFile(entryPath, \"utf-8\");\n          const [imports, exports] = await parse(code);\n          let proxyModule = [];\n          // cjs\n          if (!imports.length && !exports.length) {\n            // 构造代理模块\n            // 下面的代码后面会解释\n            const res = require(entryPath);\n            const specifiers = Object.keys(res);\n            proxyModule.push(\n              `export { ${specifiers.join(\",\")} } from \"${entryPath}\"`,\n              `export default require(\"${entryPath}\")`\n            );\n          } else {\n            // esm 格式比较好处理，export * 或者 export default 即可\n            if (exports.includes(\"default\")) {\n              proxyModule.push(`import d from \"${entryPath}\";export default d`);\n            }\n            proxyModule.push(`export * from \"${entryPath}\"`);\n          }\n          \n          debug(\"代理模块内容: %o\", proxyModule.join(\"\\n\"));\n\n          const loader = path.extname(entryPath).slice(1);\n\n          return {\n            loader: loader as Loader,\n            contents: proxyModule.join(\"\\n\"),\n            resolveDir: root,\n          };\n        }\n      );\n    },\n  };\n}","import os from \"os\";\nimport path from \"path\";\nimport { HASH_RE, JS_TYPES_RE, QUERY_RE } from \"./constants\";\n\nexport function slash(p: string): string {\n  return p.replace(/\\\\/g, \"/\");\n}\n\nexport const isWindows = os.platform() === \"win32\";\n\nexport function normalizePath(id: string): string {\n  return path.posix.normalize(isWindows ? slash(id) : id);\n}\n\nexport const isJSRequest = (id: string): boolean => {\n  id = cleanUrl(id);\n  if (JS_TYPES_RE.test(id)) {\n    return true;\n  }\n  if (!path.extname(id) && !id.endsWith(\"/\")) {\n    return true;\n  }\n  return false;\n};\n\nexport const cleanUrl = (url: string): string =>\n  url.replace(HASH_RE, \"\").replace(QUERY_RE, \"\");\n","/*\n * @Author: hidetodong\n * @Date: 2023-02-09 22:10:55\n * @LastEditTime: 2023-02-09 22:16:43\n * @LastEditors: hidetodong\n * @Description:\n * @FilePath: /hidetoxic-vite/src/node/plugins/esbuild.ts\n * HIDETOXIC - 版权所有\n */\n\nimport { readFile } from \"fs-extra\";\nimport path from \"path\";\nimport { Plugin } from \"../plugin\";\nimport { isJSRequest } from \"../utils\";\nimport esbuild from \"esbuild\";\n\n/** esbuild转译插件 */\nexport function esbuildTransformPlugin(): Plugin {\n  return {\n    name: \"h-vite:esbuild-transform\",\n    async load(id) {\n      if (isJSRequest(id)) {\n        try {\n          const code = await readFile(id, \"utf-8\");\n          return code;\n        } catch (error) {\n          return null;\n        }\n      }\n    },\n    async transform(code, id) {\n      if (isJSRequest(id)) {\n        const extname = path.extname(id).slice(1);\n        const { code: tranformedCode, map } = await esbuild.transform(code, {\n          target: \"esnext\",\n          format: \"esm\",\n          sourcemap: true,\n          loader: extname as \"js\" | \"ts\" | \"jsx\" | \"tsx\",\n        });\n        return {\n          code: tranformedCode,\n          map,\n        };\n      }\n      return null;\n    },\n  };\n}\n","// 新建 src/node/plugins/importAnalysis.ts\nimport { init, parse } from \"es-module-lexer\";\nimport { BARE_IMPORT_RE, PRE_BUNDLE_DIR } from \"../constants\";\nimport { isJSRequest, normalizePath } from \"../utils\";\n// magic-string 用来作字符串编辑\nimport MagicString from \"magic-string\";\nimport path from \"path\";\nimport { Plugin } from \"../plugin\";\nimport { ServerContext } from \"../server/index\";\nexport function importAnalysisPlugin(): Plugin {\n  let serverContext: ServerContext;\n  return {\n    name: \"m-vite:import-analysis\",\n    configureServer(s) {\n      // 保存服务端上下文\n      serverContext = s;\n    },\n    async transform(code: string, id: string) {\n      // 只处理 JS 相关的请求\n      if (!isJSRequest(id)) {\n        return null;\n      }\n      await init;\n      // 解析 import 语句\n      const [imports] = parse(code);\n      const ms = new MagicString(code);\n      // 对每一个 import 语句依次进行分析\n      for (const importInfo of imports) {\n        // 举例说明: const str = `import React from 'react'`\n        // str.slice(s, e) => 'react'\n        const { s: modStart, e: modEnd, n: modSource } = importInfo;\n        if (!modSource) continue;\n        // 第三方库: 路径重写到预构建产物的路径\n        if (BARE_IMPORT_RE.test(modSource)) {\n          const bundlePath = normalizePath(\n            path.join(\"/\", PRE_BUNDLE_DIR, `${modSource}.js`)\n          );\n          ms.overwrite(modStart, modEnd, bundlePath);\n        } else if (modSource.startsWith(\".\") || modSource.startsWith(\"/\")) {\n          // 直接调用插件上下文的 resolve 方法，会自动经过路径解析插件的处理\n          const resolved = await this.resolve(modSource, id);\n          if (resolved) {\n            ms.overwrite(modStart, modEnd, resolved.id);\n          }\n        }\n      }\n\n      return {\n        code: ms.toString(),\n        // 生成 SourceMap\n        map: ms.generateMap(),\n      };\n    },\n  };\n}\n","/*\n * @Author: hidetodong\n * @Date: 2023-02-09 21:51:19\n * @LastEditTime: 2023-02-09 22:31:09\n * @LastEditors: hidetodong\n * @Description:\n * @FilePath: /hidetoxic-vite/src/node/plugins/resolve.ts\n * HIDETOXIC - 版权所有\n */\nimport path from \"path\";\nimport { ServerContext } from \"../server\";\nimport { Plugin } from \"../plugin\";\nimport { pathExists } from \"fs-extra\";\nimport resolve from \"resolve\";\nimport { DEFAULT_EXTENSIONS } from \"../constants\";\nimport { normalizePath } from \"../utils\";\n\n/** 路径解析插件 */\nexport function resolvePlugin(): Plugin {\n  let serverContext: ServerContext;\n\n  return {\n    name: \"h-vite:resolve\",\n    configureServer(s) {\n      // 先保存服务端上下文\n      serverContext = s;\n    },\n    async resolveId(id: string, importer?: string) {\n      // 1.处理绝对路径\n      if (path.isAbsolute(id)) {\n        if (await pathExists(id)) {\n          // 返回的id就是实际文件的路径\n          return { id };\n        }\n        // 加上 root 路径前缀，处理/src/main.tsx的情况\n        id = path.join(serverContext.root, id);\n        if (await pathExists(id)) {\n          return { id };\n        }\n      }\n\n      // 2.相对路径\n      else if (id.startsWith(\".\")) {\n        if (!importer) {\n          throw new Error(\"fuck\");\n        }\n        // 判断是否有后缀名\n        const hasExtension = path.extname(id).length > 1;\n        let resolvedId: string;\n        // 2.1 包含后缀 ./App.tsx\n        if (hasExtension) {\n          resolvedId = normalizePath(\n            resolve.sync(id, { basedir: path.dirname(importer) })\n          );\n          if (await pathExists(resolvedId)) {\n            return { id: resolvedId };\n          }\n        }\n        // 2.2 不包含后缀 ./App\n        else {\n          // ./App -> ./App.tsx\n          for (const extname of DEFAULT_EXTENSIONS) {\n            try {\n              const withExtension = `${id}${extname}`;\n              resolvedId = normalizePath(\n                resolve.sync(withExtension, { basedir: path.dirname(importer) })\n              );\n              if (await pathExists(resolvedId)) {\n                return { id: resolvedId };\n              }\n            } catch (error) {\n              continue;\n            }\n          }\n        }\n      }\n      return null;\n    },\n  };\n}\n","import { Plugin } from \"../plugin\";\nimport { esbuildTransformPlugin } from \"./esbuild\";\nimport { importAnalysisPlugin } from \"./importAnalysis\";\nimport { resolvePlugin } from \"./resolve\";\n\nexport function resolvePlugins(): Plugin[] {\n  return [resolvePlugin(), esbuildTransformPlugin(), importAnalysisPlugin()];\n}\n","import { NextHandleFunction } from 'connect';\nimport { pathExists, readFile } from 'fs-extra';\nimport path from 'path';\nimport { ServerContext } from '../index';\n\nexport function indexHtmlMiddleware(serverContext:ServerContext): NextHandleFunction {\n    return async (req,res,next) => {\n        if(req.url === \"/\") {\n            const { root } = serverContext\n            const indexHtmlPath = path.join(root,\"index.html\")\n            if(await pathExists(indexHtmlPath)){\n                const rawHtml = await readFile(indexHtmlPath,\"utf8\")\n                let html = rawHtml\n\n                for(const plugin of serverContext.plugins) {\n                    if(plugin.transformIndexHtml) {\n                        html = await plugin.transformIndexHtml(html)\n                    }\n                }\n\n                res.statusCode = 200\n                res.setHeader(\"Content-Type\",\"text/html\")\n                return res.end(html)\n            }\n        }\n\n        return next()\n    }\n}","import { NextHandleFunction } from \"connect\";\nimport { isJSRequest, cleanUrl } from \"../../utils\";\nimport { ServerContext } from \"../index\";\nimport createDebug from \"debug\";\n\nconst debug = createDebug(\"dev\");\n\nexport async function transformRequest(\n  url: string,\n  serverContext: ServerContext\n) {\n  const { pluginContainer } = serverContext;\n  url = cleanUrl(url);\n  // 简单来说，就是依次调用插件容器的 resolveId、load、transform 方法\n  const resolvedResult = await pluginContainer.resolveId(url);\n  let transformResult;\n  if (resolvedResult?.id) {\n    let code = await pluginContainer.load(resolvedResult.id);\n    if (typeof code === \"object\" && code !== null) {\n      code = code.code;\n    }\n    if (code) {\n      transformResult = await pluginContainer.transform(\n        code as string,\n        resolvedResult?.id\n      );\n    }\n  }\n  return transformResult;\n}\n\nexport function transformMiddleware(\n  serverContext: ServerContext\n): NextHandleFunction {\n  return async (req, res, next) => {\n    if (req.method !== \"GET\" || !req.url) {\n      return next();\n    }\n    const url = req.url;\n    debug(\"transformMiddleware: %s\", url);\n    // transform JS request\n    if (isJSRequest(url)) {\n      // 核心编译函数\n      let result = await transformRequest(url, serverContext);\n      let final;\n      if (!result) {\n        return next();\n      }\n      if (result && typeof result !== \"string\") {\n        final = result.code;\n      }\n      // 编译完成，返回响应给浏览器\n      res.statusCode = 200;\n      res.setHeader(\"Content-Type\", \"application/javascript\");\n      return res.end(final);\n    }\n\n    next();\n  };\n}\n"],"mappings":"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","names":["import_picocolors","import_path","path","build","import_path","import_path","os","path","createDebug","build","resolve","fs","path","path","import_fs_extra","import_path","import_esbuild","path","esbuild","import_es_module_lexer","import_path","MagicString","path","import_path","import_fs_extra","import_resolve","path","resolve","import_fs_extra","import_path","path","import_debug","debug","createDebug","connect","cac"]}