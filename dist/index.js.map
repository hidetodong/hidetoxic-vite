{"version":3,"sources":["../src/node/cli.ts","../src/node/pluginContainer.ts","../src/node/server/index.ts","../src/node/optimizer/index.ts","../src/node/constants.ts","../src/node/optimizer/scanPlugin.ts","../src/node/optimizer/preBundlePlugin.ts","../src/node/utils.ts","../src/node/plugins/index.ts","../src/node/server/middleware/indexHtml.ts"],"sourcesContent":["import cac from 'cac'\nimport { startDevServer } from './server'\n\nconst cli = cac()\n\ncli\n    .command('[root]','Run dev server')\n    .alias(\"serve\")\n    .alias(\"dev\")\n    .action(async ()=>{\n        await startDevServer()\n    })\n\ncli.help()\ncli.parse()","import type {\n    LoadResult,\n    PartialResolvedId,\n    SourceDescription,\n    PluginContext as RollupPluginContext,\n    ResolvedId,\n    Plugin\n} from 'rollup'\n\nexport interface PluginContainer {\n    resolveId(id:string,importer?:string):Promise<PartialResolvedId | null>;\n    load(id:string):Promise<LoadResult | null>;\n    transform(code:string,id:string):Promise<SourceDescription | null>\n}\n\nexport const createPluginContainer = (plugins:Plugin[]): PluginContainer => {\n    // 插件上下问\n\n    /** @ts-ignore */\n    class Context implements RollupPluginContext {\n        async resolve(id:string,importer?:string) {\n            let out = await pluginContainer.resolveId(id,importer);\n            if(typeof out === \"string\") out = { id:out }\n            return out as ResolvedId | null\n        }\n    }\n    // 插件容器\n    const pluginContainer:PluginContainer = {\n        async resolveId(id:string,importer?:string){\n            const ctx = new Context() as any;\n            for(const plugin of plugins) {\n                if(plugin.resolveId) {\n                    const newId = await plugin.resolveId.call(ctx as any,importer)\n                    if(newId) {\n                        id = typeof newId === \"string\" ? newId : newId.id\n                        return { id }\n                    }\n                }\n            }\n            return null\n        },\n        async load(id){\n            const ctx = new Context() as any;\n            for(const plugin of plugins) {\n                if(plugin.load){\n                    const result = await plugin.load.call(ctx,id)\n                    if(result){\n                        return result;\n                    }\n                }\n            }\n            return null\n        },\n        async transform(code,id) {\n            const ctx = new Context() as any;\n            for(const plugin of plugins) {\n                const result = await plugin.transform.call(ctx,code,id)\n                if(!result) continue;\n                if(typeof result === 'string') {\n                    code = result\n                }else{\n                    code = result.code\n                }\n            }\n            return { code }\n        }\n    }\n\n    return pluginContainer\n}","import { PluginContainer, createPluginContainer } from './../pluginContainer';\nimport connect from 'connect'\n\nimport { blue,green } from 'picocolors'\nimport { optimize } from '../optimizer'\nimport { resolvePlugins } from '../plugins'\nimport { Plugin } from '../plugin'\nimport { indexHtmlMiddleware } from './middleware/indexHtml';\n\nexport interface ServerContext {\n    root:string,\n    pluginContainer:PluginContainer\n    app:connect.Server\n    plugins:Plugin[]\n}\n\nexport async function startDevServer(){\n    const app = connect()\n\n    const root = process.cwd()\n    const startTime = Date.now()\n\n    const plugins = resolvePlugins()\n    const pluginContainer = createPluginContainer(plugins)\n\n    const serverContext:ServerContext =  {\n        root:process.cwd(),\n        app,\n        pluginContainer,\n        plugins\n    }\n\n    for(const plugin of plugins) {\n        if(plugin.configureServer) {\n            await plugin.configureServer(serverContext)\n        }\n    }\n\n    //  处理 html文件\n    app.use(indexHtmlMiddleware(serverContext))\n\n    \n\n    app.listen(3000,async ()=>{\n\n        await optimize(root)\n\n        console.log(\n            green(\"🚀HIDETOXIC-VITE 已启动\"),\n            `总时间${Date.now() - startTime}ms`\n        )\n\n        console.log(`> 本地访问路径: ${blue(\"http://localhost:3000\")}`)\n    })\n}   ","import path from 'path' \nimport { build } from 'esbuild'\nimport { green } from 'picocolors';\nimport { PRE_BUNDLE_DIR } from '../constants'\nimport { scanPlugin } from \"./scanPlugin\"\nimport { preBundlePlugin } from './preBundlePlugin';\n\n \nexport async function optimize (root:string){\n    // 1.确定入口\n    const entry = path.resolve(root,\"src/main.tsx\")\n    // 2.从入口开始扫描\n    const deps = new Set<string>()\n    await build({\n        entryPoints:[entry],\n        bundle:true,\n        write:false,\n        plugins:[scanPlugin(deps)]\n    })\n    console.log(`${green(\"需要预构建的依赖：\")}\\n${[...deps].map(green).map(item => ` ${item}`).join('\\n')}`)\n    // 3. 预构建依赖\n    await build({\n        entryPoints: [...deps],\n        write: true,\n        bundle: true,\n        format: \"esm\",\n        splitting: true,\n        outdir: path.resolve(root, PRE_BUNDLE_DIR),\n        plugins: [preBundlePlugin(deps)],\n    });\n\n}\n\n","import path from 'path'\nexport const EXTERNAL_TYPES = [\n    \"css\",\n    \"less\",\n    \"sass\",\n    \"scss\",\n    \"styl\",\n    \"stylus\",\n    \"pcss\",\n    \"postcss\",\n    \"vue\",\n    \"svelte\",\n    \"marko\",\n    \"astro\",\n    \"png\",\n    \"jpe?g\",\n    \"gif\",\n    \"svg\",\n    \"ico\",\n    \"webp\",\n    \"avif\",\n  ];\n  \n  export const BARE_IMPORT_RE = /^[\\w@][^:]/;\n\n  export const PRE_BUNDLE_DIR = path.join(\"node_modules\",\".h-vite\")\n  ","import { Plugin } from 'esbuild'\nimport { BARE_IMPORT_RE,EXTERNAL_TYPES } from '../constants'\n\nexport function scanPlugin(deps:Set<string>):Plugin { \n    return {\n        name:'esbuild:scan-deps',\n        setup(build){\n            // 忽略的文件类型\n            build.onResolve(\n                {filter:new RegExp(`\\\\.(${EXTERNAL_TYPES.join(\"|\")})$`)},\n                (resolveInfo)=>{\n                    return {\n                        path:resolveInfo.path,\n                        external:true\n                    }\n                }\n            )\n\n            // 忽略的文件类型\n            build.onResolve(\n                {\n                    filter: BARE_IMPORT_RE\n                },\n                (resolveInfo) => {\n                    const { path:id } = resolveInfo\n                    // 推入deps中\n                    deps.add(id)\n                    return {\n                        path:id,\n                        external:true\n                    }\n                }\n            )\n        }\n    }\n}\n\n\n","import { Loader, Plugin } from \"esbuild\";\nimport { BARE_IMPORT_RE } from \"../constants\";\n// 用来分析 es 模块 import/export 语句的库\nimport { init, parse } from \"es-module-lexer\";\nimport path from \"path\";\n// 一个实现了 node 路径解析算法的库\nimport resolve from \"resolve\";\n// 一个更加好用的文件操作库\nimport fs from \"fs-extra\";\n// 用来开发打印 debug 日志的库\nimport createDebug from \"debug\";\nimport { normalizePath } from \"../utils\";\n\nconst debug = createDebug(\"dev\");\n\nexport function preBundlePlugin(deps: Set<string>): Plugin {\n  return {\n    name: \"esbuild:pre-bundle\",\n    setup(build) {\n      build.onResolve(\n        {\n          filter: BARE_IMPORT_RE,\n        },\n        (resolveInfo) => {\n          const { path: id, importer } = resolveInfo;\n          const isEntry = !importer;\n          // 命中需要预编译的依赖\n          if (deps.has(id)) {\n            // 若为入口，则标记 dep 的 namespace\n            return isEntry\n              ? {\n                  path: id,\n                  namespace: \"dep\",\n                }\n              : {\n                  // 因为走到 onResolve 了，所以这里的 path 就是绝对路径了\n                  path: resolve.sync(id, { basedir: process.cwd() }),\n                };\n          }\n        }\n      );\n\n      // 拿到标记后的依赖，构造代理模块，交给 esbuild 打包\n      build.onLoad(\n        {\n          filter: /.*/,\n          namespace: \"dep\",\n        },\n        async (loadInfo) => {\n          await init;\n          const id = loadInfo.path;\n          const root = process.cwd();\n          const entryPath = normalizePath(resolve.sync(id, { basedir: root }));\n          const code = await fs.readFile(entryPath, \"utf-8\");\n          const [imports, exports] = await parse(code);\n          let proxyModule = [];\n          // cjs\n          if (!imports.length && !exports.length) {\n            // 构造代理模块\n            // 下面的代码后面会解释\n            const res = require(entryPath);\n            const specifiers = Object.keys(res);\n            proxyModule.push(\n              `export { ${specifiers.join(\",\")} } from \"${entryPath}\"`,\n              `export default require(\"${entryPath}\")`\n            );\n          } else {\n            // esm 格式比较好处理，export * 或者 export default 即可\n            if (exports.includes(\"default\")) {\n              proxyModule.push(`import d from \"${entryPath}\";export default d`);\n            }\n            proxyModule.push(`export * from \"${entryPath}\"`);\n          }\n          \n          debug(\"代理模块内容: %o\", proxyModule.join(\"\\n\"));\n\n          const loader = path.extname(entryPath).slice(1);\n\n          return {\n            loader: loader as Loader,\n            contents: proxyModule.join(\"\\n\"),\n            resolveDir: root,\n          };\n        }\n      );\n    },\n  };\n}","import os from 'os'\nimport path from 'path'\n\nexport function slash(p: string): string {\n  return p.replace(/\\\\/g, \"/\");\n}\n\nexport const isWindows = os.platform() === \"win32\";\n\n\nexport function normalizePath(id: string): string {\n  return path.posix.normalize(isWindows ? slash(id) : id);\n}","import { Plugin } from '../plugin'\n\nexport function resolvePlugins ():Plugin[] {\n    return  []\n}","import { NextHandleFunction } from 'connect';\nimport { pathExists, readFile } from 'fs-extra';\nimport path from 'path';\nimport { ServerContext } from '../index';\n\nexport function indexHtmlMiddleware(serverContext:ServerContext): NextHandleFunction {\n    return async (req,res,next) => {\n        if(req.url === \"/\") {\n            const { root } = serverContext\n            const indexHtmlPath = path.join(root,\"index.html\")\n            if(await pathExists(indexHtmlPath)){\n                const rawHtml = await readFile(indexHtmlPath,\"utf8\")\n                let html = rawHtml\n\n                for(const plugin of serverContext.plugins) {\n                    if(plugin.transformIndexHtml) {\n                        html = await plugin.transformIndexHtml(html)\n                    }\n                }\n\n                res.statusCode = 200\n                res.setHeader(\"Content-Type\",\"text/html\")\n                return res.end(html)\n            }\n        }\n\n        return next()\n    }\n}"],"mappings":"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","names":["import_picocolors","import_path","path","build","import_path","import_path","os","path","createDebug","build","resolve","fs","path","path","import_fs_extra","import_path","path","connect","cac"]}